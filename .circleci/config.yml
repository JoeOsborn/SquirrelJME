# ---------------------------------------------------------------------------
# Multi-Phasic Applications: SquirrelJME
#     Copyright (C) Stephanie Gawroriski <xer@multiphasicapps.net>
#     Copyright (C) Multi-Phasic Applications <multiphasicapps.net>
# ---------------------------------------------------------------------------
# SquirrelJME is under the GNU General Public License v3, or later.
# See license.mkd for licensing and copyright information.
# ---------------------------------------------------------------------------
# DESCRIPTION: CircleCI Build Configuration
# SourceForge: squirreljme@frs.sourceforge.net
# SourceForge Root: /home/frs/project/squirreljme/AutoBuild/

version: 2.1
executors:
  buildenv:
    docker:
      - image: circleci/openjdk:8-jdk

orbs:
  win: circleci/windows@2.4.0

jobs:
  ################################## WINDOWS #################################
  build_windows:
    executor:
      name: win/default
      shell: cmd.exe
    steps:
      - checkout
      - run:
          name: Gradle Build and Test
          command: gradlew build test --continue --parallel
          shell: cmd.exe
      - run:
          name: Save test results
          command: |
            mkdir -p /c/users/circleci/test-results/junit
            /usr/bin/find . -type f -regex '.*/build/test-results/.*xml' -exec cp {} /c/users/circleci/test-results/junit/ \;
          when: always
          shell: bash.exe
      - store_test_results:
          path: c:\users\circleci\test-results
      - store_artifacts:
          path: c:\users\circleci\test-results
  ratufacoat_build_windows:
    executor:
      name: win/default
      shell: cmd.exe
    steps:
      - checkout
      - attach_workspace:
          at: .
      - run:
          name: Install required dependencies
          working_directory: ratufacoat
          shell: cmd.exe
          command: choco install cmake.install
      - run:
          name: Setup CMake build
          working_directory: ratufacoat
          shell: bash.exe
          command: |
            "$PROGRAMFILES/CMake/bin/cmake.exe" .
      - run:
          name: Compile CMake build
          working_directory: ratufacoat
          shell: bash.exe
          command: |
            "$PROGRAMFILES/CMake/bin/cmake.exe" --build .
      - store_artifacts:
          path: ratufacoat\src\Debug\SquirrelJME.exe
          destination: SquirrelJME.exe
      - add_ssh_keys:
          fingerprints:
            - "89:2f:af:c5:51:83:22:57:78:18:5e:13:9c:a8:41:23"
      - run:
          name: Upload to SourceForge
          working_directory: ratufacoat
          shell: bash.exe
          command: |
            scp -B -o BatchMode=yes -o StrictHostKeyChecking=no src/Debug/SquirrelJME.exe squirreljme@frs.sourceforge.net:/home/frs/project/squirreljme/AutoBuild/$CIRCLE_BRANCH/ratufacoat_win64.exe || echo Ignoring failed upload;
  ratufacoat_build_windows_libretro:
    executor:
      name: win/default
      shell: cmd.exe
    steps:
      - checkout
      - attach_workspace:
          at: .
      - run:
          name: Install make
          working_directory: ratufacoat
          shell: cmd.exe
          command: choco install make
      - run:
          name: Install 7-zip
          working_directory: ratufacoat
          shell: cmd.exe
          command: choco install 7zip
      - run:
          name: Download mingw-w64 (32-bit)
          working_directory: ratufacoat
          shell: cmd.exe
          command: curl --retry 2 --connect-timeout 120 -o w32.7z -L https://download.sourceforge.net/project/mingw-w64/Toolchains%20targetting%20Win32/Personal%20Builds/mingw-builds/8.1.0/threads-win32/dwarf/i686-8.1.0-release-win32-dwarf-rt_v6-rev0.7z
      - run:
          name: Download mingw-w64 (64-bit)
          working_directory: ratufacoat
          shell: cmd.exe
          command: curl --retry 2 --connect-timeout 120 -o w64.7z -L https://download.sourceforge.net/project/mingw-w64/Toolchains%20targetting%20Win64/Personal%20Builds/mingw-builds/8.1.0/threads-win32/seh/x86_64-8.1.0-release-win32-seh-rt_v6-rev0.7z
      - run:
          name: Extract mingw-w64 (32-bit)
          working_directory: ratufacoat
          shell: bash.exe
          command: |
            "$PROGRAMFILES/7-Zip/7z.exe" x -y w32.7z
      - run:
          name: Extract mingw-w64 (64-bit)
          working_directory: ratufacoat
          shell: bash.exe
          command: |
            "$PROGRAMFILES/7-Zip/7z.exe" x -y w64.7z
      - run:
          name: Compile libRetro (32-bit)
          working_directory: ratufacoat
          shell: bash.exe
          command: |
            export PATH="$PATH:$(pwd)/mingw32/bin" && make -f makefilelibretro platform=windows_x86
      - run:
          name: Compile libRetro (64-bit)
          working_directory: ratufacoat
          shell: bash.exe
          command: |
            export PATH="$PATH:$(pwd)/mingw64/bin" && make -f makefilelibretro platform=windows_x86_64
      - store_artifacts:
          path: ratufacoat\squirreljme_libretro.windows_x86.dll
          destination: squirreljme_libretro.windows_x86.dll
      - store_artifacts:
          path: ratufacoat\squirreljme_libretro.windows_x86_64.dll
          destination: squirreljme_libretro.windows_x86_64.dll
      - add_ssh_keys:
          fingerprints:
            - "89:2f:af:c5:51:83:22:57:78:18:5e:13:9c:a8:41:23"
      - run:
          name: Upload to SourceForge
          working_directory: ratufacoat
          shell: bash.exe
          command: |
            scp -B -o BatchMode=yes -o StrictHostKeyChecking=no squirreljme_libretro.windows_x86.dll squirreljme@frs.sourceforge.net:/home/frs/project/squirreljme/AutoBuild/$CIRCLE_BRANCH/squirreljme_libretro.windows_x86.dll || echo Ignoring failed upload;
            scp -B -o BatchMode=yes -o StrictHostKeyChecking=no squirreljme_libretro.windows_x86_64.dll squirreljme@frs.sourceforge.net:/home/frs/project/squirreljme/AutoBuild/$CIRCLE_BRANCH/squirreljme_libretro.windows_x86_64.dll || echo Ignoring failed upload;
  ################################# MAC OS X #################################
  build_macosx:
    macos:
      xcode: 11.3.0
    steps:
      - checkout
      - run:
          name: Update Brew
          command: brew update
      - run:
          name: Install Gradle and OpenJDK 11
          command: brew install gradle openjdk@11
      - run:
          name: Gradle Build and Test
          command: ./gradlew build test --continue --parallel
      - run:
          name: Save test results
          command: |
            mkdir -p ~/test-results/junit/
            find . -type f -regex '.*/build/test-results/.*xml' -exec cp {} ~/test-results/junit/ \;
          when: always
      - store_test_results:
          path: ~/test-results
      - store_artifacts:
          path: ~/test-results/junit
  ratufacoat_build_macosx:
    macos:
      xcode: 11.3.0
    steps:
      - checkout
      - run:
          name: Update Brew
          command: brew update
      - run:
          name: Install CMake
          command: brew install cmake
      - attach_workspace:
          at: .
      - run:
          name: Setup CMake build
          working_directory: ratufacoat
          command: cmake .
      - run:
          name: Compile CMake build
          working_directory: ratufacoat
          command: cmake --build .
      - store_artifacts:
          path: ratufacoat/src/SquirrelJME
          destination: SquirrelJME
      - add_ssh_keys:
          fingerprints:
            - "89:2f:af:c5:51:83:22:57:78:18:5e:13:9c:a8:41:23"
      - run:
          name: Upload to SourceForge
          working_directory: ratufacoat
          command: |
            scp -B -o BatchMode=yes -o StrictHostKeyChecking=no src/SquirrelJME squirreljme@frs.sourceforge.net:/home/frs/project/squirreljme/AutoBuild/$CIRCLE_BRANCH/ratufacoat_macosx || echo Ignoring failed upload;
  ################################### LINUX ##################################
  build_linux:
    executor: buildenv
    steps:
      - checkout
      - run:
          name: Gradle Build and Test
          command: ./gradlew build test --continue --parallel
      - run:
          name: Save test results
          command: |
            mkdir -p ~/test-results/junit/
            find . -type f -regex '.*/build/test-results/.*xml' -exec cp {} ~/test-results/junit/ \;
          when: always
      - persist_to_workspace:
          root: .
          paths:
            - '.gradle/*'
            - 'build/*'
            - '*/.gradle/*'
            - '*/build/*'
            - '*/*/build/*'
      - store_test_results:
          path: ~/test-results
      - store_artifacts:
          path: ~/test-results/junit
  ratufacoat_build_linux:
    executor: buildenv
    steps:
      - checkout
      - run:
          name: Install required dependencies
          command: |
            sudo apt-get update -y
            sudo apt-get install -y cmake build-essential
      - attach_workspace:
          at: .
      - run:
          name: Setup CMake build
          working_directory: ratufacoat
          command: cmake .
      - run:
          name: Compile CMake build
          working_directory: ratufacoat
          command: cmake --build .
      - store_artifacts:
          path: ratufacoat/src/SquirrelJME
          destination: SquirrelJME
      - add_ssh_keys:
          fingerprints:
            - "89:2f:af:c5:51:83:22:57:78:18:5e:13:9c:a8:41:23"
      - run:
          name: Upload to SourceForge
          working_directory: ratufacoat
          command: |
            scp -B -o BatchMode=yes -o StrictHostKeyChecking=no src/SquirrelJME squirreljme@frs.sourceforge.net:/home/frs/project/squirreljme/AutoBuild/$CIRCLE_BRANCH/ratufacoat_linux_amd64 || echo Ignoring failed upload;
  test_springcoat:
    executor: buildenv
    steps:
      - checkout
      - attach_workspace:
          at: .
      - run:
          name: SpringCoat Tests
          command: timeout --foreground 15m ./gradlew testSpringCoat --console plain --continue --parallel
          no_output_timeout: 15m
      - run:
          name: Save test results
          command: |
            mkdir -p ~/test-results/junit/
            find . -type f -regex '.*/springcoat/junit-reports/.*xml' -exec cp {} ~/test-results/junit/ \;
          when: always
      - run:
          name: Save snapshots
          command: |
            mkdir -p ~/test-results/nps/
            find . -type f -regex '.*/springcoat/nps/.*nps' -exec cp {} ~/test-results/nps/ \;
          when: always
      - store_test_results:
          path: ~/test-results
      - store_artifacts:
          path: ~/test-results/junit
      - store_artifacts:
          path: ~/test-results/nps
  test_summercoat:
    executor: buildenv
    steps:
      - checkout
      - attach_workspace:
          at: .
      - run:
          name: SummerCoat Tests
          command: |
            if ! timeout --foreground 1s ./gradlew testSummerCoat --console plain --continue --parallel
            then
              echo "SummerCoat testing failed, ignoring..." 1>&2
            fi
          no_output_timeout: 1m
      - run:
          name: Save test results
          command: |
            mkdir -p ~/test-results/junit/
            find . -type f -regex '.*/summercoat/junit-reports/.*xml' -exec cp {} ~/test-results/junit/ \;
          when: always
      - run:
          name: Save snapshots
          command: |
            mkdir -p ~/test-results/nps/
            find . -type f -regex '.*/summercoat/nps/.*nps' -exec cp {} ~/test-results/nps/ \;
          when: always
      - store_test_results:
          path: ~/test-results
      - store_artifacts:
          path: ~/test-results/junit
      - store_artifacts:
          path: ~/test-results/nps
  ################################### USERS ##################################
  export_user_guide:
    executor: buildenv
    steps:
      - checkout
      - run:
          name: Checkout Wiki
          command: git clone git@github.com:SquirrelJME/SquirrelJME.wiki.git /tmp/wiki
      - run:
          name: Wikify
          command: .circleci/squirreljme-wikify-user-guide.sh "$(pwd)" "/tmp/wiki"
      - run:
          name: Update Git User
          command: |
            cd "/tmp/wiki" && git config user.name "SquirrelJME Automation" && git config user.email "xerthesquirrel+squirreljme@gmail.com"
      - run:
          name: Commit changes
          command: |
            cd "/tmp/wiki" && git commit -m "Synchronize User-Guide" || echo "Ignoring commit."
      - add_ssh_keys:
          fingerprints:
            - "26:b8:ae:4d:53:64:4c:6a:59:3d:a6:60:44:90:9d:6c"
      - run:
          name: Push changes
          command: |
            cd "/tmp/wiki" && git push

  ################################ CONSTRUCTION ###############################
  # Runs the `testJar` task so any operations following this will run faster
  # when they need to use these JARs
  construct_testJars:
    executor: buildenv
    steps:
      - checkout
      - attach_workspace:
          at: .
      - run:
          name: Construct Test JARs
          command: ./gradlew testJar --continue --parallel
      - persist_to_workspace:
          root: .
          paths:
            - '.gradle/*'
            - 'build/*'
            - '*/.gradle/*'
            - '*/build/*'
            - '*/*/build/*'

  # Constructs the ROM fragment libraries for SummerCoat, since they are used
  # for general ROM construction
  construct_libSummerCoat:
    executor: buildenv
    steps:
      - checkout
      - attach_workspace:
          at: .
      - run:
          name: Construct SummerCoat Libraries
          command: ./gradlew libSummerCoat --continue --parallel
      - persist_to_workspace:
          root: .
          paths:
            - '.gradle/*'
            - 'build/*'
            - '*/.gradle/*'
            - '*/build/*'
            - '*/*/build/*'

  # All of the tests so that they can run from within SummerCoat
  construct_libTestSummerCoat:
    executor: buildenv
    steps:
      - checkout
      - attach_workspace:
          at: .
      - run:
          name: Construct Test SummerCoat Libraries
          command: ./gradlew libTestSummerCoat --continue --parallel
      - persist_to_workspace:
          root: .
          paths:
            - '.gradle/*'
            - 'build/*'
            - '*/.gradle/*'
            - '*/build/*'
            - '*/*/build/*'

  # Constructs the standard SummerCoat ROM, could be uploaded later
  construct_romSummerCoat:
    executor: buildenv
    steps:
      - checkout
      - attach_workspace:
          at: .
      - run:
          name: Construct SummerCoat ROM
          command: ./gradlew romSummerCoat --continue --parallel
      - persist_to_workspace:
          root: .
          paths:
            - '.gradle/*'
            - 'build/*'
            - '*/.gradle/*'
            - '*/build/*'
            - '*/*/build/*'

  # Constructs the test SummerCoat ROM, could be uploaded later, this is so
  # that any RatufaCoats have an actual ROM that can be tested to ensure that
  # it properly works.
  construct_romTestSummerCoat:
    executor: buildenv
    steps:
      - checkout
      - attach_workspace:
          at: .
      - run:
          name: Construct Test SummerCoat ROM
          command: ./gradlew romTestSummerCoat --continue --parallel
      - persist_to_workspace:
          root: .
          paths:
            - '.gradle/*'
            - 'build/*'
            - '*/.gradle/*'
            - '*/build/*'
            - '*/*/build/*'


workflows:
  version: 2
  tests:
    jobs:
      ############################# STANDARD TESTS ############################
      - build_windows
      - build_linux
      - build_macosx
      - test_springcoat:
          requires:
            - construct_testJars
      - test_summercoat:
          requires:
            - construct_libTestSummerCoat

      ###################### LIBRARY AND ROM CONSTRUCTION #####################
      - construct_testJars:
          requires:
            - build_linux
      - construct_libSummerCoat:
          requires:
            - build_linux
      - construct_libTestSummerCoat:
          requires:
            - construct_libSummerCoat
            - construct_testJars
      - construct_romSummerCoat:
          requires:
            - construct_libSummerCoat
      - construct_romTestSummerCoat:
          requires:
            - construct_libTestSummerCoat

      ############################## RATUFACOAT ##############################
      - ratufacoat_build_windows:
          requires:
            - build_windows
            - construct_romTestSummerCoat
      - ratufacoat_build_windows_libretro:
          requires:
            - ratufacoat_build_windows
      - ratufacoat_build_linux:
          requires:
            - build_linux
            - construct_romTestSummerCoat
      - ratufacoat_build_macosx:
          requires:
            - build_macosx
            - construct_romTestSummerCoat

  #################### TASKS TO INCREASE USER FRIENDLINESS ####################
  friendliness:
    jobs:
      - export_user_guide:
          filters:
            branches:
              only:
                - trunk
                - wip-userguide
