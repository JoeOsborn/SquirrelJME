# 2016/02/29

## 11:09

Today is a leap year, so it will not be until another 4 years or so until I can
write a blog post on this day.

## 15:17

My TI89 Titanium has a decent amount of ROM space and memory, it also has a
m68k CPU. So if I could use similar code generators for Palm OS 68k and the
TI89.

## 15:21

What I need to do is make it so that any dependencies that are used to launch
are program are loaded properly.

## 20:56

Interesting, if `java.lang.Byte` does not exist then the compiler crashes.

## 21:12

JavaME lacks `Void`, I hope the compiler does not need it.

## 21:31

I suppose the first thing to do is to write the interpreter engine so that I
can check to see if it works. Then I can reuse the interpreter bits for the
native compiler since they have to decode the same instructional details
anyway. The interpreter will be pure with no optimizations at all, that is
up to the native compiler.

## 21:49

And that interpreter engine will have to handle things such as GPIOs, class
loading, JAR files, file system access. It would have to do it in a way so
that whatever is running on it feels like a real system when it really is not.
Also, when the compiler is written and code is generatable and ran, the local
interpreter could be used internally as a kind of test so to speak. So
basically the interpreter will be a natively compiled application. It would
however still require JARs of the standard library to exist however. However
in general it will allow me to write a nicely magical standard library that
does not rely on native methods to exist at all.

