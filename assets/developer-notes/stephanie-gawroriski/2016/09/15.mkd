# 2016/09/15

## 07:36

I will need a name based API factory creator that can use the JITConfig, this
way the ABI can be stored in the JIT configuration and used without requiring
a built-in setup.

## 08:12

Ok, so what is needed is the native code writer should be given the ABI this
way it has said information from the start. The ABI information can be used
along with the allocator to handle method calls. One considering is that the
native code writer should be the class which initializes the register
allocator.

## 09:39

A large number of arguments are going to be passed to it, so as such there
should be a configuration system of sorts. This would be similar to `JITConfig`
and would allow settings to grow accordingly.

## 10:04

The `BasicOutput` class can be used to store caches of the factory and the
configuration as needed. In fact, it can be used to create code writers.

## 14:05

What I need for the native code is a type specifying the size of the input. I
can then have the allocator prime the arguments for me. I already have
`NativeRegisterType`.

## 14:34

I believe what the allocator needs is a means of allocating just a specific
type in a specific location so to speak.

## 19:10

`MultiSetDeque` could use a copy constructed variant for sub-Deques.

## 19:48

So what I will need for the allocator on the code writer side is just an
association of which locals are associated with what `NativeAllocations`.

## 20:59

One thing I can do is handle 8-bit and 16-bit systems right now. Essentially I
planned to write another JIT that could write code for these systems, however
I should just do that now otherwise there will just be lots of duplicate code.
Currently for argument handling the argument sizes could be considered
very easily.

## 21:39

So what I need now is a Java stack/local type that is just rather generic for
the base class at least.

## 21:50

I actually do not need to remove stack variables, values which are cached will
just use other variables instead.

