# 2018/03/01

## 04:18

Yay a new month! I think one thing I can do is write a basic abstract class
which is just a forwarding system call, but that might be a bit ugly
especially if other system calls need to be made by the code.

## 04:19

But I can have a class which is basically just basic system calls with
names for everything and then just require implementation of the simple
methods. The packet system will be adjusted to where it provides the usual
packet interface but over some kind of stream. But most I intend to just be
system calls as such.

## 04:23

So tomorrow will be setting up new system calls and such as a base then
working on a new test system so that I can run tests and such. I definitely
believe I should have a main method system call.

## 12:44

The system calling interface and the packet stream stuff is going to be
simplified now. Services are no longer going to use packet streams they will
just use direct method calls since that is faster, but it has the same
function for the most part.

## 13:31

Okay so next thing to do is simplify the service infrastructure. It can
actually be done much simpler. I believe initially I will make the existing
service code on top of the packet stream code via the system calls. And it
will work because of `DatagramIn` and `DatagramOut` for the most part. The
only thing that is not around are means for the kernel to ask clients for
things. Well, that actually does exist in a way it can just wait on a queue
of sorts.

## 14:34

I think for services I will want to do something similar to system calls and
have instead of packets and such I just send parameters and things. That
could work well and would likely be faster and have less overhead.
