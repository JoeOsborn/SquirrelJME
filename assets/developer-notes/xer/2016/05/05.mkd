# 2016/05/05

## 08:49

The sliding window test would be the most complex test to port since much of
it is sequential.

## 10:38

A slight problem with my changes is that it depends on the test framework
broadcasting the available tests then checking against them. I should modify it
so that I can run specific sub-tests which vary on the input string. For
example the sliding window uses a seed, I can instead for the test specify
the random seed to be used in the sub-test name

## 11:39

For some tests I will need a generic way to create any kind of test based on
the input arguments. So basically, a given set of tests such as those for
integers and objects will be decoded and sent to a factory which performs the
operation as desired. So a test for example could be
`equals(int:2, int:2)==boolean:true`
where the arguments are decoded as the specific type and value and then passed.
Then it can be compared against a given value type.

## 12:44

I will have to come back to the test framework after I work on other things. I
would need to redo a few of the tests. Not too sure if I had any other ideas
to refactor. I did the main splitting of the extra projects so that are more
standalone and compacted. I would not like to return to the
compiler/interpreter, so that eventually I can get code generation being
performed.

## 21:29

So the first thing to be done, would be to run through all the operations to
determine the bounds of the basic blocks based on jump targets and such.
