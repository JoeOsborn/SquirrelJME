# Building

------------------------------------------------------------------------------

***Patience is required:***
***Currently SquirrelJME is in a state of development and does not produce***
***any actual runnable binaries yet. There is no current predicated time***
***when SquirrelJME will be able to run general software and games.***

------------------------------------------------------------------------------

SquirrelJME requires the following before it can be built:

 * Java 7 or newer Virtual Machine
 * Java 7 or newer Compiler

## Notes on Running

SquirrelJME uses a simplified error system which starts with a two capital
letter prefix followed by two digits and letters.

 * [List of Error Codes](http://multiphasicapps.net/uv/errors.mkd)

## Installing Java

SquirrelJME requires a Java 7 virtual machine in order to build itself.

### Common Linux Distributions

If you use a common and popular Linux distribution it likely has a JDK
available.

 * Arch
   * See <https://wiki.archlinux.org/index.php/Java>
 * Debian, Ubuntu, and derivatives
   * See <https://wiki.debian.org/Java>
   * One of the following depending on package availability
     * `apt-get install openjdk-7-jdk`
     * `apt-get install openjdk-8-jdk`
     * `apt-get install openjdk-9-jdk`
 * Gentoo
   * See <https://wiki.gentoo.org/wiki/Java>

### Oracle's JDK

Oracle's JDK supports the following (as of this writing):

 * Linux
 * Mac OS X
 * ReactOS (as Windows)
 * Solaris
 * Windows
 * Wine (as Windows)

Oracle's Java JDK can be downloaded from:

 * <http://www.oracle.com/technetwork/java/javase/downloads/index.html>
 
Ensure that you **download and install** the ***JDK***.

If running on ReactOS/Windows/Wine, make sure that the `PATH` environment
variables refers to the JDK's binary directory:

 * `C:\Program Files\Java\jdk1.8.0_131\bin\`

# Bootstrap Build Environment

The main interaction with the SquirrelJME build environment is with the build
bootstrapper which initializes, compiles, and runs the build environment.

## System Specific

Each system has a different interface to the bootstrap environment, beyond this
the remainder of it is the same regardless of the system used.

### ReactOS and Windows

Oracle's Java JDK can be downloaded from:

 * <http://www.oracle.com/technetwork/java/javase/downloads/index.html>

The script used for building is `build.cmd`. This requires the command prompt
which may be accessed by running `cmd`. This may be found in the start menu
or may be accessed via **Windows Key + R**, typing `cmd`, then hitting enter.

Recommended setup for running the environment, assuming SquirrelJME source
code is located in the example `c:\users\stephanie\desktop\squirreljme`:

 * `cd c:\users\stephanie\temp`
 * `mkdir squirreljme-build`
 * `cd squirreljme-build`
 * `c:\users\stephanie\desktop\squirreljme\build.cmd`

### UNIX-Like: Linux, Mac OS X, Solaris, BSD, etc.

The script used for building is `build.sh`.

Recommended setup for running the environment, assuming SquirrelJME source
code is located in the example `/home/stephanie/squirreljme`:

 * `cd /tmp`
 * `mkdir squirreljme-build`
 * `cd squirreljme-build`
 * `/home/stephanie/squirreljme/build.sh`

# Standard Building

Compiling SquirrelJME binaries to run on a target system uses the following
format, the main command being `target`.

 * `<build script> target <options>`

The options used to build the target vary depending on how the build system
parses them.

 * `template`
   * This represents that a template be used which is read from a set of
     built-in files and is used to configure the JIT.
 * `project.jar`
   * This specifies that the given project (within the SquirrelJME packaging
     system) is to be included for compilation in the output target.
   * Note that this does not read JARs which are in the host filesystem unless
     they are in a location SquirrelJME is able to use them.
   * The location the build system looks for projects which are not provided
     by SquirrelJME should be the `bins` directory in the build location unless
     it has been overridden by a system property.
     * For the JARs to be recognized by SquirrelJME they must be compatible
       with Java ME, this includes having a compatible `META-INF/MANIFEST.MF`.
 * `+key=value`
   * This adds the specified key and value to the JIT configuration, replacing
     a value which has previously been set.
   * This can be used to override an option that is provided in a template.
 * `-key`
   * This removes the specified key from the JIT configuration so that it is
     no longer set.
   * This can be used to remove an option that has previously been provided.

# JIT Configuration Options

These options may be used when creating configurations to have the JIT compile
for a specific platform.

## `jit` Namespace

These options affect the operation of the JIT.

## `jit.target` Namespace

These options only affect the target depending on the target architecture and
CPU.

## `jit.rename` Namespace

This namespace contains the unsafe renames which are only performed in the
package `net.multiphasicapps.squirreljme.unsafe`, the pairs are in the form of:

 * `jit.rename.systemvm=examplesystemvm`

In that example any static method calls for methods in `__Ext_systemvm__` will
be rewritten to use `__Int_examplesystemvm__` as the class instead.

## JIT Configuration Options

This is a list of options which may be passed to the JIT.

 * `jit.addressbits` -- The number of bits which are used to represents
   pointers to memory addresses.
 * `jit.arch` -- The architecture to target.
   * `arm` -- ARM Family CPUs.
   * `ia` -- Intel Architecture (x86, x86_64).
 * `jit.dump.assembler` -- If set to true then this will dump all commands sent
   to the assembler.
 * `jit.dump.translator` -- If set to true then this will dump all byte code
   which has been expanded within basic blocks.
 * `jit.profile` -- Enable profiling, used to measure how fast methods
   execute.
 * `jit.translator` -- The translator to use when compiling expanded byte code
   into native machine code.
   * `naive` -- Naive translator, this performs no optimization and directly
     translates expanded byte code into machine code. Although this is the
     fastest translator it produces the slowest and largest code.

