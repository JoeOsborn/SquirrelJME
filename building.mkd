# Building

SquirrelJME requires the following before it can be built:

 * Java 7 or newer Virtual Machine
 * Java 7 or newer Compiler

# Notes on Running

SquirrelJME uses a simplified error system which starts with a two capital
letter prefix followed by two digits and letters.

 * [List of Error Codes](http://multiphasicapps.net/uv/errors.mkd)

# Bootstrap Build Environment

The main interaction with the SquirrelJME build environment is with the build
bootstrapper which initializes, compiles, and runs the build environment.

## System Specific

Each system has a different interface to the bootstrap environment, beyond this
the remainder of it is the same regardless of the system used.

### ReactOS and Windows

The script used for building is `build.cmd`. This requires the command prompt
which may be accessed by running `cmd`. This may be found in the start menu
or may be accessed via **Windows Key + R**, typing `cmd`, then hitting enter.

Recommended setup for running the environment, assuming SquirrelJME source
code is located in the example `c:\users\stephanie\desktop\squirreljme`:

 * `cd c:\users\stephanie\temp`
 * `mkdir squirreljme-build`
 * `cd squirreljme-build`
 * `c:\users\stephanie\desktop\squirreljme\build.cmd`

Make sure that the Java path which is used refers to the JDK such as:

 * `C:\Program Files\Java\jdk1.8.0_131\bin\`

### UNIX-Like: Linux, Mac OS X, Solaris, BSD, etc.

The script used for building is `build.sh`.

Recommended setup for running the environment, assuming SquirrelJME source
code is located in the example `/home/stephanie/squirreljme`:

 * `cd /tmp`
 * `mkdir squirreljme-build`
 * `cd squirreljme-build`
 * `/home/stephanie/squirreljme/build.sh`

# Standard Building

***Currently SquirrelJME is in a state of development and does not produce***
***any actual runnable binaries yet.***

Compiling SquirrelJME binaries to run on a target system uses the following
format, the main command being `target`.

 * `<build script> target <options>`

The options used to build the target vary depending on how the build system
parses them.

 * `template`
   * This represents that a template be used which is read from a set of
     built-in files and is used to configure the JIT.
 * `project.jar`
   * This specifies that the given project (within the SquirrelJME packaging
     system) is to be included for compilation in the output target.
   * Note that this does not read JARs which are in the host filesystem unless
     they are in a location SquirrelJME is able to use them.
   * The location the build system looks for projects which are not provided
     by SquirrelJME should be the `bins` directory in the build location unless
     it has been overridden by a system property.
 * `+key=value`
   * This adds the specified key and value to the JIT configuration, replacing
     a value which has previously been set.
   * This can be used to override an option that is provided in a template.
 * `-key`
   * This removes the specified key from the JIT configuration so that it is
     no longer set.
   * This can be used to remove an option that has previously been provided.

