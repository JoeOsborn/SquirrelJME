# Design Document

This document outlines several decisions and design considerations for the
SquirrelJME Virtual Machine. This document should reflect the most recent
path that SquirrelJME will be taking in its design.

For day to day notes on my current thought process you may look within the
[developer notes](assets/developer-notes/index.mkd).

Because Java ME is different from Java SE, there are some considerations,
advantages, and disadvantages to consider when reading this document. Note that
this document is mostly within the scope of Java ME and not Java SE.

 * Reduced and subsetted class library.
   * The main library is much smaller which means it will load faster and
     use less memory. Less memory means it can run on smaller/weaker systems.
 * No reflection.
   * There is `Class.forName()` and `Class.newInstance()`, however they are
     trivial to support.
   * More secure because access checks do not have to be performed at run-time
     to determine if it is permissable to access an object.
   * Random object fields (and finals) can be cached because their reference
     or primitive values will never change.
   * More secure because for example changing `Boolean.TRUE` to be `false` may
     cause security exploits with code that relies on it being `true`.
   * The resulting virtual machine is smaller because information such as
     the types of fields and methods that exist and their type information does
     not have to be included within the virtual machine. This reduces the bloat
     within the virtual machine.
   * Produces faster code because `final` variable and especially
     `static final` values can directly be accessed rather than requiring a
     read of a field pointer value.
 * No finalizers (the `finalize()` method).
   * Finalizers are very integrated with how the garbage collector works.
   * It is never known when they will actually be called (if ever).
   * Timing attacks could be performed when finalizers are called between
     garbage collection runs.
 * No serialization.
   * No objects are `Serializable`.
   * Serialization uses virtual machine magic to access internal details, since
     there is no reflection the information that would be used for
     serialization does not exist.
   * The `transient` keyword becomes obsolete.
   * Simplifies implementation.
 * No `invokedynamic` instruction.
   * Simplifies virtual machine operation, at the cost of lambdas (which could
     be smartly wrapped in anonymous classes by a compiler).

There are also disadvantages however:

 * Without reflection, one cannot include plugins dynamically from the program.
   * However, Java ME 3 (or so) added LIBlets which may be optional and provide
     a slight alternative to plugins. These however are fixed to the JAR/JAD
     which means that the difficulty is increased.
   * Alternatively, Java ME 8 has `ServiceLoader` which enables JARs to
     potentially be merged to provide services. Also using `Class.forName()`
     and `Class.newInstance()`, plugins using a common interface can be
     initialized when they are not directly known.

For specific APIs, one should read the [Project Scope](scope.mkd) document
which outlines the APIs which exist for Java ME and whether they would be
implemented in SquirrelJME or third party vendors.

# Programming

SquirrelJME is written entirely in Java. This means that it only requires a
Java virtual machine and a Java compiler to be built. There are also no other
dependencies apart from what is within SquirrelJME itself, it is entirely
standalone and self contained.

## Self Hosting

I intend SquirrelJME to be self hosting in that it can build itself.

In the future a Java compiler will be written which can run on SquirrelJME
itself and allow building and compiling itself from source. This would also
allow other programs to be built from source and can be used as a self
contained Java development environment.

## Compilation

One may ask why Java and not another language such as C? Well, Java is a much
simpler language compared to C when it comes to syntax (C has the preprocessor,
structures, pointers, typedefs, function pointers, etc.). One main advantage
of Java is the consistency of the code.

One misconception about using Java is that it is impossible to use native code
or one will require and assembler to assemble assembly code for things which
Java cannot do. This is not the case for SquirrelJME. The major and most
important part of SquirrelJME is the compiler which can turn Java byte code
into native machine code. Since the compiler is very much integrated into
SquirrelJME this means that certain aspects of interacting with the host
environment can be accessed by changing compilation for certain aspects in a
way where it remains compatible with Java but also provides native access when
needed. Native access is provided by replacing method calls to special static
methods within a special class by the appropriate machine code rather than
invoking a method call. These special rewrites are only available to a single
class which is called `net.multiphasicapps.squirreljme.unsafe.SquirrelJME`.
The choice of doing this allows this class to wrap native behavior in the
library in a way where it can be used on Java SE virtual machines along with
SquirrelJME using it itself.

On a Java SE host, the `SquirrelJME` class implements all of its methods and
it interacts directly with the host virtual machine.

On SquirrelJME, the `SquirrelJME` class invokes methods within a secretive and
internal `__Unsafe__`. Essentially `__Unsafe__` becomes a virtual class where
any invocation of its methods are renamed to another class which is specific to
a given operating system or machine. This means that there are no conflicts
when `__Unsafe__` is called and does not require magic to allow duplicate class
names to be called. So for example calling static methods from `__Unsafe__`
will just turn into `TargetSpecificUnsafe`. Then that target specific class
itself can call other compiler special classes which could generate machine
code and such.

# Garbage Collection

For simplicity the garbage collector is a reference counter with sweeping when
no more memory is available (or GC is called manually). As such, cyclic
object references will not be freed unless one or both directions are
weakly referenced (using `WeakReference`). This means that if object A depends
on object B:

 * A has a strong reference to B, B does not reference A.
 * A has a weak reference to B, B does not reference A.
 * A has a strong reference to B, B has a weak reference to A.
 * A has a weak reference to B, B has a strong reference to A.
 * A and B both have weak references to each other.

Although reference counting may increase lock contention on the CPU and memory
buses it simplifies the design greatly by not requiring complex garbage
collection algorithms. In most cases with reference counting, SquirrelJME is
capable of using always a minimum footprint of memory depending on whether that
memory should be freed to the operating system or within SquirrelJME's own
memory for other programs running in it.

