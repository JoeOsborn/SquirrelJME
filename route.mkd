# Release Route

# 0.0.7 (TBD)

This will be a release which will result in generation of more optimized code
which should increase the speed of how fast code executes accordingly.

 * HIL
   * Next stage after the byte code.
   * Should be stack caching.
   * Should perform optimizations that are known at compile time.

# 0.0.5 (TBD)

 * Incremental Verifier and JIT Backend
   * Allow JARs to be compiled at run-time at a far lower cost than the
     initial compilation.
   * The initial generation of the kernel, speed does not really matter but
     a new verifier and JIT compilation backend can be written where it
     allows for a JIT along with making the verification process faster.
   * Be able to run JARs dynamically.

# 0.0.3 (TBD)

This will be the first released version of SquirrelJME, it will be a proof of
concept version for the most part. This will require some advanced usage
because of being a proof of concept.

I did plan for a run-time JIT to be done here, but I think it would be faster
to make everything exist first and have the JIT in place for the next version
instead. That way all the base code exists and I have something that can
actually be tested rather than not. One could still one programs provided they
were compiled into the same binary.

 * JavaDoc with Completion
   * Need to know which stuff is not documented and what is not implemented.
   * This will be useful.
   * Can be used to show how much of the API is implemented.
   * Shows documentation of the code.
   * Can be used as a reference I can refer to instead of opening up source
     code to look what something does.
 * Byte Code Interpreter
   * Slow but it is the simplest and quickest to implement for the most part.
   * Allows behavior to be more fully known before the HIL is implemented.
   * Allows part of the core library to be implemented.
     * Running tests would be a good thing.
     * When the HIL is implemented, the library would already be there rather
       than being partially implemented.
     * With a library already existing and with tests available, making sure
       the HIL works would be far easier.
   * Faster to write.
 * Support MIDlets
   * UI Demo
     * This is the UI demo available in the J2ME SDK.
     * Will need to be used to make sure the LCDUI works.
   * Opera Mini
     * Is a web browser.
     * Not sure if the proxy server is still running, but even then there are
       still a few things it can be used for.
     * Probably the most popular program that is not a game, since it browses
       the web and there are really no other browsers that exist at all.
     * Available in multiple languages so that it could be used to test those
       despite not being able to speak them.
     * May or may not need SSL, if it requires it to be implemented then this
       will be skipped.
     * This may also be skipped if the proxy server is offline, which would
       make the browser non-functional.
   * DoomRPG
     * Is a turn based game.
     * I played it when it came out around and beat it, I should be able to
       pick up playing it again.
     * Java ME was very widely used for games and such so supporting a game
       would probably be a good choice.
 * Any library functionality needed to support the three MIDlets.
   * Core CLDC Library
     * Most clases can probably be left unimplemented, just enough to get the
       MIDlets working.
   * MIDP3 Classes
     * LCDUI will be the biggest part.
 * Wintercoat
   * A C implementation.
   * Could be used as a library.
   * Uses SquirrelJME as a runtime.

