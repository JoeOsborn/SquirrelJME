# Release Route

# 0.0.3

This will be the first released version of SquirrelJME, it will be a proof of
concept version for the most part.

 * JavaDoc with Completion
   * Need to know which stuff is not documented and what is not implemented.
   * This will be useful.
   * Can be used to show how much of the API is implemented.
   * Shows documentation of the code.
   * Can be used as a reference I can refer to instead of opening up source
     code to look what something does.
 * HIL Compiler
   * Forget about LIL until later.
   * Do not worry about native architectures for now.
   * This will allow me to get a single sub-system working before starting the
     other sub-systems.
 * HIL Simulator
   * Run code generated by the HIL compiler.
   * Will be slow but this is a proof of concept.
 * Support three MIDlets
   * UI Demo
     * This is the UI demo available in the J2ME SDK.
     * Will need to be used to make sure the LCDUI works.
   * Opera Mini
     * Is a web browser.
     * Not sure if the proxy server is still running, but even then there are
       still a few things it can be used for.
     * Probably the most popular program that is not a game, since it browses
       the web and there are really no other browsers that exist at all.
     * Available in multiple languages so that it could be used to test those
       despite not being able to speak them.
   * DoomRPG
     * Is a turn based game.
     * I played it when it came out around and beat it, I should be able to
       pick up playing it again.
     * Java ME was very widely used for games and such so supporting a game
       would probably be a good choice.
 * Any library functionality needed to support the three MIDlets.
   * Core CLDC Library
     * Most clases can probably be left unimplemented, just enough to get the
       MIDlets working.
   * MIDP3 Classes
     * LCDUI will be the biggest part.

# Some Potential Ideas

I am rather fascinated by virtualized environments and there are some ideas
which I do consider every so often. I will not be implementing these ideas
right now, but they could be done when SquirrelJME is rather complete and
there is nothing else to do.

## A POSIX Environment

I could write an environment which acts as a POSIX environment, perhaps
emulating Linux system calls and such potentially, written in Java. This could
then be used to have a full fledged POSIX development environment on
SquirrelJME. At least with SquirrelJME it is very possible for it to be done
provided a Java compiler is written. In retrospect, everything could be done
within Java although there would need to be special checks and handling for
signals which can appear out of bound when execution occurs. There would need
to be periodic check for signals so that a signal can potentially be thrown
and handled. The `fork` system call would also be an issue, at best there
would really only be `posix_pspawn`. Ideally for speed most everything would
be written in Java and pretty much provide an environment which is mostly
written in Java.

A C compiler could be supported and could output to a special kind of byte code
which the environment is capable of executing so that it can compile and run
programs. However, this is not really needed provided there is a Java compiler.
The environment itself could pretty much only be capable of compiling and
executing Java byte code, perhaps in a simulated environment.

This idea would however bring such a simulated environment to systems which do
not have such things. Although there would be a speed penalty, there would be
a consistent environment across multiple platforms.

